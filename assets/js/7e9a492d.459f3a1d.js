(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{115:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return m}));var r=t(3),a=t(7),s=(t(0),t(160)),p=["components"],i={title:"Transform Steps",prepare:["cp data/transform.csv transform.csv","cp data/transform-groups.csv transform-groups.csv","cp data/transform-pivot.csv transform-pivot.csv"],cleanup:["rm transform.csv","rm transform-groups.csv","rm transform-pivot.csv"]},o={unversionedId:"guides/transform-steps",id:"guides/transform-steps",isDocsHomePage:!1,title:"Transform Steps",description:"This guide assumes basic familiarity with the Frictionless Framework. To learn more, please read the Introduction and Quick Start.",source:"@site/../docs/guides/transform-steps.md",slug:"/guides/transform-steps",permalink:"/docs/guides/transform-steps",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/main/docs/../docs/guides/transform-steps.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1648467769,formattedLastUpdatedAt:"3/28/2022",sidebar:"guides",previous:{title:"Transform Guide",permalink:"/docs/guides/transform-guide"},next:{title:"Package Guide",permalink:"/docs/guides/framework/package-guide"}},l=[{value:"Resource Steps",id:"resource-steps",children:[{value:"Add Resource",id:"add-resource",children:[]},{value:"Remove Resource",id:"remove-resource",children:[]},{value:"Transform Resource",id:"transform-resource",children:[]},{value:"Update Resource",id:"update-resource",children:[]}]},{value:"Table Steps",id:"table-steps",children:[{value:"Aggregate Table",id:"aggregate-table",children:[]},{value:"Attach Tables",id:"attach-tables",children:[]},{value:"Debug Table",id:"debug-table",children:[]},{value:"Diff Tables",id:"diff-tables",children:[]},{value:"Intersect Tables",id:"intersect-tables",children:[]},{value:"Join Tables",id:"join-tables",children:[]},{value:"Melt Table",id:"melt-table",children:[]},{value:"Merge Tables",id:"merge-tables",children:[]},{value:"Normalize Table",id:"normalize-table",children:[]},{value:"Pivot Table",id:"pivot-table",children:[]},{value:"Print Table",id:"print-table",children:[]},{value:"Recast Table",id:"recast-table",children:[]},{value:"Transpose Table",id:"transpose-table",children:[]},{value:"Validate Table",id:"validate-table",children:[]},{value:"Write Table",id:"write-table",children:[]}]},{value:"Field Steps",id:"field-steps",children:[{value:"Add Field",id:"add-field",children:[]},{value:"Filter Fields",id:"filter-fields",children:[]},{value:"Move Field",id:"move-field",children:[]},{value:"Remove Field",id:"remove-field",children:[]},{value:"Split Field",id:"split-field",children:[]},{value:"Unpack Field",id:"unpack-field",children:[]},{value:"Update Field",id:"update-field",children:[]}]},{value:"Row Steps",id:"row-steps",children:[{value:"Filter Rows",id:"filter-rows",children:[]},{value:"Search Rows",id:"search-rows",children:[]},{value:"Slice Rows",id:"slice-rows",children:[]},{value:"Sort Rows",id:"sort-rows",children:[]},{value:"Split Rows",id:"split-rows",children:[]},{value:"Subset Rows",id:"subset-rows",children:[]},{value:"Ungroup Rows",id:"ungroup-rows",children:[]}]},{value:"Cell Steps",id:"cell-steps",children:[{value:"Convert Cells",id:"convert-cells",children:[]},{value:"Fill Cells",id:"fill-cells",children:[]},{value:"Format Cells",id:"format-cells",children:[]},{value:"Interpolate Cells",id:"interpolate-cells",children:[]},{value:"Replace Cells",id:"replace-cells",children:[]},{value:"Set Cells",id:"set-cells",children:[]}]}],c={toc:l};function m(e){var n=e.components,t=Object(a.a)(e,p);return Object(s.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"This guide assumes basic familiarity with the Frictionless Framework. To learn more, please read the ",Object(s.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/guides/introduction"},"Introduction")," and ",Object(s.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/guides/quick-start"},"Quick Start"),".")),Object(s.b)("p",null,"Frictionless includes more than 40+ built-in transform steps. They are grouped by the object so you can find them easily if you have code auto completion. Start typing, for example, ",Object(s.b)("inlineCode",{parentName:"p"},"steps.table...")," and you will see all the available steps. The groups are listed below and you will find every group described in more detail in the next sections. It's also possible to write custom transform steps. Please read the section below to learn more about it.  Let's prepare the data that we need to show how the checks below work:"),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Download ",Object(s.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/transform.csv"},Object(s.b)("inlineCode",{parentName:"a"},"transform.csv")),' to reproduce the examples (right-click and "Save link as").')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat transform.csv\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="transform.csv"',title:'"transform.csv"'},"id,name,population\n1,germany,83\n2,france,66\n3,spain,47\n")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Download ",Object(s.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/transform-groups.csv"},Object(s.b)("inlineCode",{parentName:"a"},"transform-groups.csv")),' to reproduce the examples (right-click and "Save link as").')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat transform-groups.csv\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="transform-groups.csv"',title:'"transform-groups.csv"'},"id,name,population,year\n1,germany,83,2020\n2,germany,77,1920\n3,france,66,2020\n4,france,54,1920\n5,spain,47,2020\n6,spain,33,1920\n")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Download ",Object(s.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/transform-pivot.csv"},Object(s.b)("inlineCode",{parentName:"a"},"transform-pivot.csv")),' to reproduce the examples (right-click and "Save link as").')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat transform-pivot.csv\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="transform-pivot.csv"',title:'"transform-pivot.csv"'},"region,gender,style,units\neast,boy,tee,12\neast,boy,golf,14\neast,boy,fancy,7\neast,girl,tee,3\neast,girl,golf,8\neast,girl,fancy,18\nwest,boy,tee,12\nwest,boy,golf,15\nwest,boy,fancy,8\nwest,girl,tee,6\nwest,girl,golf,16\nwest,girl,fancy,1\n")),Object(s.b)("h2",{id:"resource-steps"},"Resource Steps"),Object(s.b)("p",null,"The Resource steps are only available for a package transformation. This includes some basic resource management operations like adding or removing resources along with the hierarchical ",Object(s.b)("inlineCode",{parentName:"p"},"transform_resource")," step."),Object(s.b)("h3",{id:"add-resource"},"Add Resource"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_add(name='extra', path='transform.csv'),\n    ],\n)\npprint(target.resource_names)\npprint(target.get_resource('extra').schema)\npprint(target.get_resource('extra').read_rows())\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"['main', 'extra']\n{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 2, 'name': 'france', 'population': 66},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"remove-resource"},"Remove Resource"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_remove(name='main'),\n    ],\n)\npprint(target)\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'profile': 'data-package', 'resources': []}\n")),Object(s.b)("h3",{id:"transform-resource"},"Transform Resource"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_add(name='extra', path='transform.csv'),\n        steps.resource_transform(name='main', steps=[\n            steps.table_merge(resource='extra'),\n            steps.row_sort(field_names=['id'])\n        ]),\n        steps.resource_remove(name=\"extra\"),\n    ],\n)\npprint(target.resource_names)\npprint(target.get_resource('main').schema)\npprint(target.get_resource('main').read_rows())\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"['main']\n{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 1, 'name': 'germany', 'population': 83},\n {'id': 2, 'name': 'france', 'population': 66},\n {'id': 2, 'name': 'france', 'population': 66},\n {'id': 3, 'name': 'spain', 'population': 47},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"update-resource"},"Update Resource"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_update(name='main', title='Main Resource', description='For the docs'),\n    ],\n)\npprint(target.get_resource('main'))\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'description': 'For the docs',\n 'encoding': 'utf-8',\n 'format': 'csv',\n 'hashing': 'md5',\n 'name': 'main',\n 'path': 'transform.csv',\n 'profile': 'tabular-data-resource',\n 'schema': {'fields': [{'name': 'id', 'type': 'integer'},\n                       {'name': 'name', 'type': 'string'},\n                       {'name': 'population', 'type': 'integer'}]},\n 'scheme': 'file',\n 'title': 'Main Resource'}\n")),Object(s.b)("h2",{id:"table-steps"},"Table Steps"),Object(s.b)("p",null,"These steps are meant to be used on a table level of a resource. This includes various different operations from simple validation or writing to the disc to complex re-shaping like pivoting or melting."),Object(s.b)("h3",{id:"aggregate-table"},"Aggregate Table"),Object(s.b)("p",null,"Group rows under the given group_name then apply aggregation functions provided as aggregation dictionary (see example)"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform-groups.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_aggregate(\n            group_name="name", aggregation={"sum": ("population", sum)}\n        ),\n    ],\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'}, {'name': 'sum'}]}\n[{'name': 'france', 'sum': 120},\n {'name': 'germany', 'sum': 160},\n {'name': 'spain', 'sum': 80}]\n")),Object(s.b)("h3",{id:"attach-tables"},"Attach Tables"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n      steps.table_attach(resource=Resource(data=[["note"], ["large"], ["mid"]])),\n    ],\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[{'id': 1, 'name': 'germany', 'population': 83, 'note': 'large'},\n {'id': 2, 'name': 'france', 'population': 66, 'note': 'mid'},\n {'id': 3, 'name': 'spain', 'population': 47, 'note': None}]\n")),Object(s.b)("h3",{id:"debug-table"},"Debug Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n      steps.table_debug(function=print),\n    ],\n)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'id': 1, 'name': 'germany', 'population': 83}\n{'id': 2, 'name': 'france', 'population': 66}\n{'id': 3, 'name': 'spain', 'population': 47}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 2, 'name': 'france', 'population': 66},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"diff-tables"},"Diff Tables"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_diff(\n            resource=Resource(\n                data=[\n                    ["id", "name", "population"],\n                    [1, "germany", 83],\n                    [2, "france", 50],\n                    [3, "spain", 47],\n                ]\n            )\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 2, 'name': 'france', 'population': 66}]\n")),Object(s.b)("h3",{id:"intersect-tables"},"Intersect Tables"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_intersect(\n            resource=Resource(\n                data=[\n                    ["id", "name", "population"],\n                    [1, "germany", 83],\n                    [2, "france", 50],\n                    [3, "spain", 47],\n                ]\n            ),\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"join-tables"},"Join Tables"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_join(\n            resource=Resource(data=[["id", "note"], [1, "beer"], [2, "vine"]]),\n            field_name="id",\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[{'id': 1, 'name': 'germany', 'population': 83, 'note': 'beer'},\n {'id': 2, 'name': 'france', 'population': 66, 'note': 'vine'}]\n")),Object(s.b)("h3",{id:"melt-table"},"Melt Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_melt(field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'variable'},\n            {'name': 'value'}]}\n[{'name': 'germany', 'variable': 'id', 'value': 1},\n {'name': 'germany', 'variable': 'population', 'value': 83},\n {'name': 'france', 'variable': 'id', 'value': 2},\n {'name': 'france', 'variable': 'population', 'value': 66},\n {'name': 'spain', 'variable': 'id', 'value': 3},\n {'name': 'spain', 'variable': 'population', 'value': 47}]\n")),Object(s.b)("h3",{id:"merge-tables"},"Merge Tables"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_merge(\n            resource=Resource(data=[["id", "name", "note"], [4, "malta", "island"]])\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[{'id': 1, 'name': 'germany', 'population': 83, 'note': None},\n {'id': 2, 'name': 'france', 'population': 66, 'note': None},\n {'id': 3, 'name': 'spain', 'population': 47, 'note': None},\n {'id': 4, 'name': 'malta', 'population': None, 'note': 'island'}]\n")),Object(s.b)("h3",{id:"normalize-table"},"Normalize Table"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"table_normalize")," step normalizes an underlaying tabular stream (cast types and fix dimensions) according to a provided or inferred schema. If your data is not really big it's recommended to normalize a table before any others steps."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource("data/table.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n    ]\n)\npprint(source.read_lists())\npprint(target.read_lists())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"[['id', 'name'], ['1', 'english'], ['2', '\u4e2d\u56fd\u4eba']]\n[['id', 'name'], [1, 'english'], [2, '\u4e2d\u56fd\u4eba']]\n")),Object(s.b)("h3",{id:"pivot-table"},"Pivot Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform-pivot.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_pivot(f1="region", f2="gender", f3="units", aggfun=sum),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'region', 'type': 'string'},\n            {'name': 'boy', 'type': 'integer'},\n            {'name': 'girl', 'type': 'integer'}]}\n[{'region': 'east', 'boy': 33, 'girl': 29},\n {'region': 'west', 'boy': 35, 'girl': 23}]\n")),Object(s.b)("h3",{id:"print-table"},"Print Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_print(),\n    ]\n)\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"==  =======  ==========\nid  name     population\n==  =======  ==========\n 1  germany          83\n 2  france           66\n 3  spain            47\n==  =======  ==========\n")),Object(s.b)("h3",{id:"recast-table"},"Recast Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_melt(field_name="id"),\n        steps.table_recast(field_name="id"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 2, 'name': 'france', 'population': 66},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"transpose-table"},"Transpose Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_transpose(),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'germany', 'type': 'integer'},\n            {'name': 'france', 'type': 'integer'},\n            {'name': 'spain', 'type': 'integer'}]}\n[{'name': 'population', 'germany': 83, 'france': 66, 'spain': 47}]\n")),Object(s.b)("h3",{id:"validate-table"},"Validate Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_set(field_name="population", value="bad"),\n        steps.table_validate(),\n    ]\n)\npprint(target.schema)\ntry:\n  pprint(target.read_rows())\nexcept Exception as exception:\n  pprint(exception)\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\nFrictionlessException('[step-error] Step is not valid: \"table_validate\" raises \"[type-error] Type error in the cell \"bad\" in row \"2\" and field \"population\" at position \"3\": type is \"integer/default\"\"')\n")),Object(s.b)("h3",{id:"write-table"},"Write Table"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path=\"transform.csv\")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_write(path='tmp/transform.json'),\n    ]\n)\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat tmp/transform.json\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json",metastring:'title="tmp/transform.json"',title:'"tmp/transform.json"'},'[\n  [\n    "id",\n    "name",\n    "population"\n  ],\n  [\n    1,\n    "germany",\n    83\n  ],\n  [\n    2,\n    "france",\n    66\n  ],\n  [\n    3,\n    "spain",\n    47\n  ]\n]\n')),Object(s.b)("h2",{id:"field-steps"},"Field Steps"),Object(s.b)("p",null,"The Field steps are responsible for managing a Table Schema's fields. You can add or remove them along with more complex operations like unpacking."),Object(s.b)("h3",{id:"add-field"},"Add Field"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_add(name="note", type="string", value="eu"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[{'id': 1, 'name': 'germany', 'population': 83, 'note': 'eu'},\n {'id': 2, 'name': 'france', 'population': 66, 'note': 'eu'},\n {'id': 3, 'name': 'spain', 'population': 47, 'note': 'eu'}]\n")),Object(s.b)("h3",{id:"filter-fields"},"Filter Fields"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_filter(names=["id", "name"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'}]}\n[{'id': 1, 'name': 'germany'},\n {'id': 2, 'name': 'france'},\n {'id': 3, 'name': 'spain'}]\n")),Object(s.b)("h3",{id:"move-field"},"Move Field"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_move(name="id", position=3),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'id', 'type': 'integer'}]}\n[{'name': 'germany', 'population': 83, 'id': 1},\n {'name': 'france', 'population': 66, 'id': 2},\n {'name': 'spain', 'population': 47, 'id': 3}]\n")),Object(s.b)("h3",{id:"remove-field"},"Remove Field"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_remove(names=["id"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'name': 'germany', 'population': 83},\n {'name': 'france', 'population': 66},\n {'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"split-field"},"Split Field"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_split(name="name", to_names=["name1", "name2"], pattern="a"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'name1', 'type': 'string'},\n            {'name': 'name2', 'type': 'string'}]}\n[{'id': 1, 'population': 83, 'name1': 'germ', 'name2': 'ny'},\n {'id': 2, 'population': 66, 'name1': 'fr', 'name2': 'nce'},\n {'id': 3, 'population': 47, 'name1': 'sp', 'name2': 'in'}]\n")),Object(s.b)("h3",{id:"unpack-field"},"Unpack Field"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", type="array", value=[1, 1]),\n        steps.field_unpack(name="id", to_names=["id2", "id3"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'id2'},\n            {'name': 'id3'}]}\n[{'name': 'germany', 'population': 83, 'id2': 1, 'id3': 1},\n {'name': 'france', 'population': 66, 'id2': 1, 'id3': 1},\n {'name': 'spain', 'population': 47, 'id2': 1, 'id3': 1}]\n")),Object(s.b)("h3",{id:"update-field"},"Update Field"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", type="string", value=str),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'string'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': None, 'name': 'germany', 'population': 83},\n {'id': None, 'name': 'france', 'population': 66},\n {'id': None, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h2",{id:"row-steps"},"Row Steps"),Object(s.b)("p",null,"These steps are row-based including row filtering, slicing, and many more."),Object(s.b)("h3",{id:"filter-rows"},"Filter Rows"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.row_filter(formula="id > 1"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 2, 'name': 'france', 'population': 66},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"search-rows"},"Search Rows"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_search(regex=r"^f.*"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 2, 'name': 'france', 'population': 66}]\n")),Object(s.b)("h3",{id:"slice-rows"},"Slice Rows"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_slice(head=2),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 2, 'name': 'france', 'population': 66}]\n")),Object(s.b)("h3",{id:"sort-rows"},"Sort Rows"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_sort(field_names=["name"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 2, 'name': 'france', 'population': 66},\n {'id': 1, 'name': 'germany', 'population': 83},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"split-rows"},"Split Rows"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_split(field_name="name", pattern="a"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germ', 'population': 83},\n {'id': 1, 'name': 'ny', 'population': 83},\n {'id': 2, 'name': 'fr', 'population': 66},\n {'id': 2, 'name': 'nce', 'population': 66},\n {'id': 3, 'name': 'sp', 'population': 47},\n {'id': 3, 'name': 'in', 'population': 47}]\n")),Object(s.b)("h3",{id:"subset-rows"},"Subset Rows"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", value=1),\n        steps.row_subset(subset="conflicts", field_name="id"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 1, 'name': 'france', 'population': 66},\n {'id': 1, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"ungroup-rows"},"Ungroup Rows"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform-groups.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_ungroup(group_name="name", selection="first"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'year', 'type': 'integer'}]}\n[{'id': 3, 'name': 'france', 'population': 66, 'year': 2020},\n {'id': 1, 'name': 'germany', 'population': 83, 'year': 2020},\n {'id': 5, 'name': 'spain', 'population': 47, 'year': 2020}]\n")),Object(s.b)("h2",{id:"cell-steps"},"Cell Steps"),Object(s.b)("p",null,"The Cell steps are responsible for cell operations like converting, replacing, or formating, along with others."),Object(s.b)("h3",{id:"convert-cells"},"Convert Cells"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_convert(value="n/a", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'n/a', 'population': 83},\n {'id': 2, 'name': 'n/a', 'population': 66},\n {'id': 3, 'name': 'n/a', 'population': 47}]\n")),Object(s.b)("h3",{id:"fill-cells"},"Fill Cells"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_replace(pattern="france", replace=None),\n        steps.cell_fill(field_name="name", value="FRANCE"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 2, 'name': 'FRANCE', 'population': 66},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"format-cells"},"Format Cells"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_format(template="Prefix: {0}", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'Prefix: germany', 'population': 83},\n {'id': 2, 'name': 'Prefix: france', 'population': 66},\n {'id': 3, 'name': 'Prefix: spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"interpolate-cells"},"Interpolate Cells"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_interpolate(template="Prefix: %s", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'Prefix: germany', 'population': 83},\n {'id': 2, 'name': 'Prefix: france', 'population': 66},\n {'id': 3, 'name': 'Prefix: spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"replace-cells"},"Replace Cells"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_replace(pattern="france", replace="FRANCE"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 83},\n {'id': 2, 'name': 'FRANCE', 'population': 66},\n {'id': 3, 'name': 'spain', 'population': 47}]\n")),Object(s.b)("h3",{id:"set-cells"},"Set Cells"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python",metastring:'script title="Python"',script:!0,title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="transform.csv")\ntarget = transform(\n    source,\n    steps=[\n          steps.cell_set(field_name="population", value=100),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[{'id': 1, 'name': 'germany', 'population': 100},\n {'id': 2, 'name': 'france', 'population': 100},\n {'id': 3, 'name': 'spain', 'population': 100}]\n")))}m.isMDXComponent=!0},160:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),c=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,b=m["".concat(p,".").concat(d)]||m[d]||u[d]||s;return t?a.a.createElement(b,i(i({ref:n},l),{},{components:t})):a.a.createElement(b,i({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,p=new Array(s);p[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var l=2;l<s;l++)p[l]=t[l];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);