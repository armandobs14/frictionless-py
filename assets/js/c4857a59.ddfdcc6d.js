(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{141:function(e,t,l){"use strict";l.r(t),l.d(t,"frontMatter",(function(){return a})),l.d(t,"metadata",(function(){return o})),l.d(t,"toc",(function(){return i})),l.d(t,"default",(function(){return s}));var r=l(3),c=l(7),b=(l(0),l(161)),n=["components"],a={title:"Formats Reference"},o={unversionedId:"references/formats-reference",id:"references/formats-reference",isDocsHomePage:!1,title:"Formats Reference",description:"It's a formats reference supported by the main Frictionless package. If you have installed external plugins, there can be more formats available. Below we're listing a format group name (or a parser name) like Excel, which is used, for example, for xlsx, xls etc formats. Options can be used for creating dialects, for example, dialect = ExcelDialect(sheet=1).",source:"@site/../docs/references/formats-reference.md",slug:"/references/formats-reference",permalink:"/docs/references/formats-reference",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/main/docs/../docs/references/formats-reference.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1650876993,formattedLastUpdatedAt:"4/25/2022",sidebar:"references",previous:{title:"Schemes Reference",permalink:"/docs/references/schemes-reference"},next:{title:"Errors Reference",permalink:"/docs/references/errors-reference"}},i=[{value:"Bigquery",id:"bigquery",children:[{value:"Project",id:"project",children:[]},{value:"Dataset",id:"dataset",children:[]},{value:"Table",id:"table",children:[]}]},{value:"Ckan",id:"ckan",children:[{value:"Resource",id:"resource",children:[]},{value:"Dataset",id:"dataset-1",children:[]},{value:"Apikey",id:"apikey",children:[]},{value:"Fields",id:"fields",children:[]},{value:"Limit",id:"limit",children:[]},{value:"Sort",id:"sort",children:[]},{value:"Filters",id:"filters",children:[]}]},{value:"Csv",id:"csv",children:[{value:"Delimiter",id:"delimiter",children:[]},{value:"Line Terminator",id:"line-terminator",children:[]},{value:"Quote Char",id:"quote-char",children:[]},{value:"Double Quote",id:"double-quote",children:[]},{value:"Escape Char",id:"escape-char",children:[]},{value:"Null Sequence",id:"null-sequence",children:[]},{value:"Skip Initial Space",id:"skip-initial-space",children:[]},{value:"Comment Char",id:"comment-char",children:[]}]},{value:"Excel",id:"excel",children:[{value:"Sheet",id:"sheet",children:[]},{value:"Workbook Cache",id:"workbook-cache",children:[]},{value:"Fill Merged Cells",id:"fill-merged-cells",children:[]},{value:"Preserve Formatting",id:"preserve-formatting",children:[]},{value:"Adjust Floating Point Error",id:"adjust-floating-point-error",children:[]}]},{value:"Gsheets",id:"gsheets",children:[]},{value:"Html",id:"html",children:[{value:"Selector",id:"selector",children:[]}]},{value:"Inline",id:"inline",children:[{value:"Keys",id:"keys",children:[]},{value:"Keyed",id:"keyed",children:[]}]},{value:"Inline",id:"inline-1",children:[{value:"Keys",id:"keys-1",children:[]},{value:"Keyed",id:"keyed-1",children:[]}]},{value:"Json",id:"json",children:[{value:"Keys",id:"keys-2",children:[]},{value:"Keyed",id:"keyed-2",children:[]},{value:"Property",id:"property",children:[]}]},{value:"Ods",id:"ods",children:[{value:"Sheet",id:"sheet-1",children:[]}]},{value:"Pandas",id:"pandas",children:[]},{value:"Spss",id:"spss",children:[]},{value:"Sql",id:"sql",children:[{value:"Table",id:"table-1",children:[]},{value:"Prefix",id:"prefix",children:[]},{value:"Order By",id:"order-by",children:[]},{value:"Where",id:"where",children:[]},{value:"Namespace",id:"namespace",children:[]},{value:"Basepath",id:"basepath",children:[]}]}],u={toc:i};function s(e){var t=e.components,l=Object(c.a)(e,n);return Object(b.b)("wrapper",Object(r.a)({},u,l,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"It's a formats reference supported by the main Frictionless package. If you have installed external plugins, there can be more formats available. Below we're listing a format group name (or a parser name) like Excel, which is used, for example, for ",Object(b.b)("inlineCode",{parentName:"p"},"xlsx"),", ",Object(b.b)("inlineCode",{parentName:"p"},"xls")," etc formats. Options can be used for creating dialects, for example, ",Object(b.b)("inlineCode",{parentName:"p"},"dialect = ExcelDialect(sheet=1)"),"."),Object(b.b)("h2",{id:"bigquery"},"Bigquery"),Object(b.b)("h3",{id:"project"},"Project"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Project"),Object(b.b)("h3",{id:"dataset"},"Dataset"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Dataset"),Object(b.b)("h3",{id:"table"},"Table"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Table"),Object(b.b)("h2",{id:"ckan"},"Ckan"),Object(b.b)("h3",{id:"resource"},"Resource"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Resource"),Object(b.b)("h3",{id:"dataset-1"},"Dataset"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Dataset"),Object(b.b)("h3",{id:"apikey"},"Apikey"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Apikey"),Object(b.b)("h3",{id:"fields"},"Fields"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: array")),Object(b.b)("p",null,"Limit ckan query to certain fields"),Object(b.b)("h3",{id:"limit"},"Limit"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: int")),Object(b.b)("p",null,"Limit number of returned entries"),Object(b.b)("h3",{id:"sort"},"Sort"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Sort returned entries, e.g. by date descending: ",Object(b.b)("inlineCode",{parentName:"p"},"date desc")),Object(b.b)("h3",{id:"filters"},"Filters"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: dict")),Object(b.b)("p",null,"Filter data, e.g. field with value: ",Object(b.b)("inlineCode",{parentName:"p"},'{ "key": "value" }')),Object(b.b)("h2",{id:"csv"},"Csv"),Object(b.b)("h3",{id:"delimiter"},"Delimiter"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Csv delimiter"),Object(b.b)("h3",{id:"line-terminator"},"Line Terminator"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Csv line terminator"),Object(b.b)("h3",{id:"quote-char"},"Quote Char"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Csv quote char"),Object(b.b)("h3",{id:"double-quote"},"Double Quote"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Csv double quote"),Object(b.b)("h3",{id:"escape-char"},"Escape Char"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Csv escape char"),Object(b.b)("h3",{id:"null-sequence"},"Null Sequence"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Csv null sequence"),Object(b.b)("h3",{id:"skip-initial-space"},"Skip Initial Space"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Csv skip initial space"),Object(b.b)("h3",{id:"comment-char"},"Comment Char"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Csv comment char"),Object(b.b)("h2",{id:"excel"},"Excel"),Object(b.b)("h3",{id:"sheet"},"Sheet"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: int|str")),Object(b.b)("p",null,"Number from 1 or name of an excel sheet"),Object(b.b)("h3",{id:"workbook-cache"},"Workbook Cache"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: dict")),Object(b.b)("p",null,"Workbook cache"),Object(b.b)("h3",{id:"fill-merged-cells"},"Fill Merged Cells"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Whether to fill merged cells"),Object(b.b)("h3",{id:"preserve-formatting"},"Preserve Formatting"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Whither to preserve formatting"),Object(b.b)("h3",{id:"adjust-floating-point-error"},"Adjust Floating Point Error"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Whether to adjust floating point error"),Object(b.b)("h2",{id:"gsheets"},"Gsheets"),Object(b.b)("p",null,"There are no options available."),Object(b.b)("h2",{id:"html"},"Html"),Object(b.b)("h3",{id:"selector"},"Selector"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Html selector"),Object(b.b)("h2",{id:"inline"},"Inline"),Object(b.b)("h3",{id:"keys"},"Keys"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str[]")),Object(b.b)("p",null,"A list of strings to use as data keys"),Object(b.b)("h3",{id:"keyed"},"Keyed"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Whether data rows are keyed"),Object(b.b)("h2",{id:"inline-1"},"Inline"),Object(b.b)("h3",{id:"keys-1"},"Keys"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str[]")),Object(b.b)("p",null,"A list of strings to use as data keys"),Object(b.b)("h3",{id:"keyed-1"},"Keyed"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Whether data rows are keyed"),Object(b.b)("h2",{id:"json"},"Json"),Object(b.b)("h3",{id:"keys-2"},"Keys"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str[]")),Object(b.b)("p",null,"A list of strings to use as data keys"),Object(b.b)("h3",{id:"keyed-2"},"Keyed"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: bool")),Object(b.b)("p",null,"Whether data rows are keyed"),Object(b.b)("h3",{id:"property"},"Property"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"A path within json to the data"),Object(b.b)("h2",{id:"ods"},"Ods"),Object(b.b)("h3",{id:"sheet-1"},"Sheet"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Sheet"),Object(b.b)("h2",{id:"pandas"},"Pandas"),Object(b.b)("p",null,"There are no options available."),Object(b.b)("h2",{id:"spss"},"Spss"),Object(b.b)("p",null,"There are no options available."),Object(b.b)("h2",{id:"sql"},"Sql"),Object(b.b)("h3",{id:"table-1"},"Table"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Table name"),Object(b.b)("h3",{id:"prefix"},"Prefix"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Prefix for all table names"),Object(b.b)("h3",{id:"order-by"},"Order By"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Order_by statement passed to sql"),Object(b.b)("h3",{id:"where"},"Where"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Where statement passed to sql"),Object(b.b)("h3",{id:"namespace"},"Namespace"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"Sql schema"),Object(b.b)("h3",{id:"basepath"},"Basepath"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"Type: str")),Object(b.b)("p",null,"A basepath, for example, for sqlite path"))}s.isMDXComponent=!0},161:function(e,t,l){"use strict";l.d(t,"a",(function(){return s})),l.d(t,"b",(function(){return O}));var r=l(0),c=l.n(r);function b(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function n(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,r)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?n(Object(l),!0).forEach((function(t){b(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):n(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function o(e,t){if(null==e)return{};var l,r,c=function(e,t){if(null==e)return{};var l,r,c={},b=Object.keys(e);for(r=0;r<b.length;r++)l=b[r],t.indexOf(l)>=0||(c[l]=e[l]);return c}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(r=0;r<b.length;r++)l=b[r],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(c[l]=e[l])}return c}var i=c.a.createContext({}),u=function(e){var t=c.a.useContext(i),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},s=function(e){var t=u(e.components);return c.a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},d=c.a.forwardRef((function(e,t){var l=e.components,r=e.mdxType,b=e.originalType,n=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),s=u(l),d=r,O=s["".concat(n,".").concat(d)]||s[d]||p[d]||b;return l?c.a.createElement(O,a(a({ref:t},i),{},{components:l})):c.a.createElement(O,a({ref:t},i))}));function O(e,t){var l=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var b=l.length,n=new Array(b);n[0]=d;var a={};for(var o in t)hasOwnProperty.call(t,o)&&(a[o]=t[o]);a.originalType=e,a.mdxType="string"==typeof e?e:r,n[1]=a;for(var i=2;i<b;i++)n[i]=l[i];return c.a.createElement.apply(null,n)}return c.a.createElement.apply(null,l)}d.displayName="MDXCreateElement"}}]);